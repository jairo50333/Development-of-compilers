// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-0VS8TB2
// DateTime: 21.12.2018 12:46:45
// UserName: Admin
// Input file <SimpleYacc.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace SimpleParser
{
public enum Tokens {
    error=1,EOF=2,BEGIN=3,END=4,CYCLE=5,INUM=6,
    RNUM=7,ID=8,ASSIGN=9,SEMICOLON=10,WHILE=11,DO=12,
    REPEAT=13,UNTIL=14,FOR=15,TO=16,IF=17,THEN=18,
    ELSE=19,VAR=20,COMMA=21,WRITE=22,LEFT_BRACKET=23,RIGHT_BRACKET=24,
    PLUS=25,MINUS=26,MULT=27,DIVISION=28,FUNCTION=29,RETURN=30};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<int,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<int, LexLocation>
{
  // Verbatim content from SimpleYacc.y
// Ёти объ€влени€ добавл€ютс€ в класс GPPGParser, представл€ющий собой парсер, генерируемый системой gppg
    public Parser(AbstractScanner<int, LexLocation> scanner) : base(scanner) { }
  // End verbatim content from SimpleYacc.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[51];
  private static State[] states = new State[99];
  private static string[] nonTerms = new string[] {
      "progr", "$accept", "block", "stlist", "statement", "assign", "cycle", 
      "while", "repeat", "for", "write", "if", "idents", "empty", "function", 
      "funccall", "ident", "expr", "pms", "params", "returnexrp", "funcblock", 
      "T", "F", };

  static Parser() {
    states[0] = new State(new int[]{3,4},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,4,-37,10,-37},new int[]{-4,5,-5,56,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[5] = new State(new int[]{4,6,10,7});
    states[6] = new State(-22);
    states[7] = new State(new int[]{8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,4,-37,10,-37,14,-37,30,-37},new int[]{-5,8,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[8] = new State(-4);
    states[9] = new State(-5);
    states[10] = new State(new int[]{9,11,23,29});
    states[11] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,12,-17,28,-16,39,-23,40,-24,27});
    states[12] = new State(new int[]{25,13,26,23,4,-18,10,-18,14,-18,30,-18,19,-18,16,-18});
    states[13] = new State(new int[]{8,18,6,19,23,20},new int[]{-23,14,-24,27,-17,17});
    states[14] = new State(new int[]{27,15,28,25,25,-43,26,-43,4,-43,10,-43,14,-43,30,-43,19,-43,16,-43,24,-43,8,-43,3,-43,5,-43,11,-43,13,-43,15,-43,22,-43,17,-43,20,-43,29,-43,12,-43,18,-43});
    states[15] = new State(new int[]{8,18,6,19,23,20},new int[]{-24,16,-17,17});
    states[16] = new State(-46);
    states[17] = new State(-48);
    states[18] = new State(-17);
    states[19] = new State(-49);
    states[20] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,21,-17,28,-16,39,-23,40,-24,27});
    states[21] = new State(new int[]{24,22,25,13,26,23});
    states[22] = new State(-50);
    states[23] = new State(new int[]{8,18,6,19,23,20},new int[]{-23,24,-24,27,-17,17});
    states[24] = new State(new int[]{27,15,28,25,25,-44,26,-44,4,-44,10,-44,14,-44,30,-44,19,-44,16,-44,24,-44,8,-44,3,-44,5,-44,11,-44,13,-44,15,-44,22,-44,17,-44,20,-44,29,-44,12,-44,18,-44});
    states[25] = new State(new int[]{8,18,6,19,23,20},new int[]{-24,26,-17,17});
    states[26] = new State(-47);
    states[27] = new State(-45);
    states[28] = new State(new int[]{23,29,25,-19,26,-19,4,-19,10,-19,14,-19,30,-19,19,-19,16,-19,24,-19,8,-19,3,-19,5,-19,11,-19,13,-19,15,-19,22,-19,17,-19,20,-19,29,-19,12,-19,18,-19,27,-48,28,-48});
    states[29] = new State(new int[]{8,18,24,-37,21,-37},new int[]{-14,30,-20,32,-19,36,-17,37});
    states[30] = new State(new int[]{24,31,21,-34});
    states[31] = new State(-39);
    states[32] = new State(new int[]{24,33,21,34});
    states[33] = new State(-40);
    states[34] = new State(new int[]{8,18},new int[]{-17,35});
    states[35] = new State(-33);
    states[36] = new State(-35);
    states[37] = new State(-32);
    states[38] = new State(new int[]{25,-20,26,-20,4,-20,10,-20,14,-20,30,-20,19,-20,16,-20,24,-20,8,-20,3,-20,5,-20,11,-20,13,-20,15,-20,22,-20,17,-20,20,-20,29,-20,12,-20,18,-20,27,-49,28,-49});
    states[39] = new State(-21);
    states[40] = new State(new int[]{27,15,28,25,25,-42,26,-42,4,-42,10,-42,14,-42,30,-42,19,-42,16,-42,24,-42,8,-42,3,-42,5,-42,11,-42,13,-42,15,-42,22,-42,17,-42,20,-42,29,-42,12,-42,18,-42});
    states[41] = new State(-6);
    states[42] = new State(-7);
    states[43] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,44,-17,28,-16,39,-23,40,-24,27});
    states[44] = new State(new int[]{25,13,26,23,8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,4,-37,10,-37,14,-37,30,-37,19,-37},new int[]{-5,45,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[45] = new State(-23);
    states[46] = new State(-8);
    states[47] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,48,-17,28,-16,39,-23,40,-24,27});
    states[48] = new State(new int[]{12,49,25,13,26,23});
    states[49] = new State(new int[]{8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,4,-37,10,-37,14,-37,30,-37,19,-37},new int[]{-5,50,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[50] = new State(-24);
    states[51] = new State(-9);
    states[52] = new State(new int[]{8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,14,-37,10,-37},new int[]{-4,53,-5,56,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[53] = new State(new int[]{14,54,10,7});
    states[54] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,55,-17,28,-16,39,-23,40,-24,27});
    states[55] = new State(new int[]{25,13,26,23,4,-25,10,-25,14,-25,30,-25,19,-25});
    states[56] = new State(-3);
    states[57] = new State(-10);
    states[58] = new State(new int[]{8,18},new int[]{-6,59,-17,98});
    states[59] = new State(new int[]{16,60});
    states[60] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,61,-17,28,-16,39,-23,40,-24,27});
    states[61] = new State(new int[]{12,62,25,13,26,23});
    states[62] = new State(new int[]{8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,4,-37,10,-37,14,-37,30,-37,19,-37},new int[]{-5,63,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[63] = new State(-26);
    states[64] = new State(-11);
    states[65] = new State(new int[]{23,66});
    states[66] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,67,-17,28,-16,39,-23,40,-24,27});
    states[67] = new State(new int[]{24,68,25,13,26,23});
    states[68] = new State(-27);
    states[69] = new State(-12);
    states[70] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,71,-17,28,-16,39,-23,40,-24,27});
    states[71] = new State(new int[]{18,72,25,13,26,23});
    states[72] = new State(new int[]{8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,4,-37,10,-37,14,-37,30,-37,19,-37},new int[]{-5,73,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[73] = new State(new int[]{19,74,4,-28,10,-28,14,-28,30,-28});
    states[74] = new State(new int[]{8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,4,-37,10,-37,14,-37,30,-37,19,-37},new int[]{-5,75,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[75] = new State(-29);
    states[76] = new State(new int[]{21,77,4,-13,10,-13,14,-13,30,-13,19,-13});
    states[77] = new State(new int[]{8,18},new int[]{-17,78});
    states[78] = new State(-31);
    states[79] = new State(new int[]{8,18},new int[]{-17,80});
    states[80] = new State(-30);
    states[81] = new State(-14);
    states[82] = new State(-15);
    states[83] = new State(new int[]{8,18},new int[]{-17,84});
    states[84] = new State(new int[]{23,85});
    states[85] = new State(new int[]{8,18,24,-37,21,-37},new int[]{-20,86,-14,97,-19,36,-17,37});
    states[86] = new State(new int[]{24,87,21,34});
    states[87] = new State(new int[]{3,89},new int[]{-22,88});
    states[88] = new State(-41);
    states[89] = new State(new int[]{8,18,3,4,5,43,11,47,13,52,15,58,22,65,17,70,20,79,29,83,10,-37,30,-37},new int[]{-4,90,-5,56,-6,9,-17,10,-3,41,-7,42,-8,46,-9,51,-10,57,-11,64,-12,69,-13,76,-14,81,-15,82,-16,96});
    states[90] = new State(new int[]{10,7,30,93},new int[]{-21,91});
    states[91] = new State(new int[]{4,92});
    states[92] = new State(-38);
    states[93] = new State(new int[]{8,18,6,38,23,20},new int[]{-18,94,-17,28,-16,39,-23,40,-24,27});
    states[94] = new State(new int[]{10,95,25,13,26,23});
    states[95] = new State(-36);
    states[96] = new State(-16);
    states[97] = new State(-34);
    states[98] = new State(new int[]{9,11});

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-4, new int[]{-5});
    rules[4] = new Rule(-4, new int[]{-4,10,-5});
    rules[5] = new Rule(-5, new int[]{-6});
    rules[6] = new Rule(-5, new int[]{-3});
    rules[7] = new Rule(-5, new int[]{-7});
    rules[8] = new Rule(-5, new int[]{-8});
    rules[9] = new Rule(-5, new int[]{-9});
    rules[10] = new Rule(-5, new int[]{-10});
    rules[11] = new Rule(-5, new int[]{-11});
    rules[12] = new Rule(-5, new int[]{-12});
    rules[13] = new Rule(-5, new int[]{-13});
    rules[14] = new Rule(-5, new int[]{-14});
    rules[15] = new Rule(-5, new int[]{-15});
    rules[16] = new Rule(-5, new int[]{-16});
    rules[17] = new Rule(-17, new int[]{8});
    rules[18] = new Rule(-6, new int[]{-17,9,-18});
    rules[19] = new Rule(-18, new int[]{-17});
    rules[20] = new Rule(-18, new int[]{6});
    rules[21] = new Rule(-18, new int[]{-16});
    rules[22] = new Rule(-3, new int[]{3,-4,4});
    rules[23] = new Rule(-7, new int[]{5,-18,-5});
    rules[24] = new Rule(-8, new int[]{11,-18,12,-5});
    rules[25] = new Rule(-9, new int[]{13,-4,14,-18});
    rules[26] = new Rule(-10, new int[]{15,-6,16,-18,12,-5});
    rules[27] = new Rule(-11, new int[]{22,23,-18,24});
    rules[28] = new Rule(-12, new int[]{17,-18,18,-5});
    rules[29] = new Rule(-12, new int[]{17,-18,18,-5,19,-5});
    rules[30] = new Rule(-13, new int[]{20,-17});
    rules[31] = new Rule(-13, new int[]{-13,21,-17});
    rules[32] = new Rule(-19, new int[]{-17});
    rules[33] = new Rule(-19, new int[]{-20,21,-17});
    rules[34] = new Rule(-20, new int[]{-14});
    rules[35] = new Rule(-20, new int[]{-19});
    rules[36] = new Rule(-21, new int[]{30,-18,10});
    rules[37] = new Rule(-14, new int[]{});
    rules[38] = new Rule(-22, new int[]{3,-4,-21,4});
    rules[39] = new Rule(-16, new int[]{-17,23,-14,24});
    rules[40] = new Rule(-16, new int[]{-17,23,-20,24});
    rules[41] = new Rule(-15, new int[]{29,-17,23,-20,24,-22});
    rules[42] = new Rule(-18, new int[]{-23});
    rules[43] = new Rule(-18, new int[]{-18,25,-23});
    rules[44] = new Rule(-18, new int[]{-18,26,-23});
    rules[45] = new Rule(-23, new int[]{-24});
    rules[46] = new Rule(-23, new int[]{-23,27,-24});
    rules[47] = new Rule(-23, new int[]{-23,28,-24});
    rules[48] = new Rule(-24, new int[]{-17});
    rules[49] = new Rule(-24, new int[]{6});
    rules[50] = new Rule(-24, new int[]{23,-18,24});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
